// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package gpbrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProtocolRequest struct {
	CmdId                uint32   `protobuf:"varint,1,opt,name=CmdId,proto3" json:"CmdId,omitempty"`
	CmdSeq               uint32   `protobuf:"varint,2,opt,name=CmdSeq,proto3" json:"CmdSeq,omitempty"`
	CmdData              []byte   `protobuf:"bytes,3,opt,name=CmdData,proto3" json:"CmdData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtocolRequest) Reset()         { *m = ProtocolRequest{} }
func (m *ProtocolRequest) String() string { return proto.CompactTextString(m) }
func (*ProtocolRequest) ProtoMessage()    {}
func (*ProtocolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_6817d3685cdeea1c, []int{0}
}
func (m *ProtocolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolRequest.Unmarshal(m, b)
}
func (m *ProtocolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolRequest.Marshal(b, m, deterministic)
}
func (dst *ProtocolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolRequest.Merge(dst, src)
}
func (m *ProtocolRequest) XXX_Size() int {
	return xxx_messageInfo_ProtocolRequest.Size(m)
}
func (m *ProtocolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolRequest proto.InternalMessageInfo

func (m *ProtocolRequest) GetCmdId() uint32 {
	if m != nil {
		return m.CmdId
	}
	return 0
}

func (m *ProtocolRequest) GetCmdSeq() uint32 {
	if m != nil {
		return m.CmdSeq
	}
	return 0
}

func (m *ProtocolRequest) GetCmdData() []byte {
	if m != nil {
		return m.CmdData
	}
	return nil
}

type ProtocolResponse struct {
	CmdId                uint32   `protobuf:"varint,1,opt,name=CmdId,proto3" json:"CmdId,omitempty"`
	CmdSeq               uint32   `protobuf:"varint,2,opt,name=CmdSeq,proto3" json:"CmdSeq,omitempty"`
	PushSeq              uint32   `protobuf:"varint,3,opt,name=PushSeq,proto3" json:"PushSeq,omitempty"`
	ErrorCode            uint32   `protobuf:"varint,4,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	CmdData              []byte   `protobuf:"bytes,5,opt,name=CmdData,proto3" json:"CmdData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtocolResponse) Reset()         { *m = ProtocolResponse{} }
func (m *ProtocolResponse) String() string { return proto.CompactTextString(m) }
func (*ProtocolResponse) ProtoMessage()    {}
func (*ProtocolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_6817d3685cdeea1c, []int{1}
}
func (m *ProtocolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolResponse.Unmarshal(m, b)
}
func (m *ProtocolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolResponse.Marshal(b, m, deterministic)
}
func (dst *ProtocolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolResponse.Merge(dst, src)
}
func (m *ProtocolResponse) XXX_Size() int {
	return xxx_messageInfo_ProtocolResponse.Size(m)
}
func (m *ProtocolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolResponse proto.InternalMessageInfo

func (m *ProtocolResponse) GetCmdId() uint32 {
	if m != nil {
		return m.CmdId
	}
	return 0
}

func (m *ProtocolResponse) GetCmdSeq() uint32 {
	if m != nil {
		return m.CmdSeq
	}
	return 0
}

func (m *ProtocolResponse) GetPushSeq() uint32 {
	if m != nil {
		return m.PushSeq
	}
	return 0
}

func (m *ProtocolResponse) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ProtocolResponse) GetCmdData() []byte {
	if m != nil {
		return m.CmdData
	}
	return nil
}

type RPCRequestPacket struct {
	IsOneWay             bool              `protobuf:"varint,1,opt,name=IsOneWay,proto3" json:"IsOneWay,omitempty"`
	RequestId            uint32            `protobuf:"varint,2,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
	ServiceName          string            `protobuf:"bytes,3,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	FuncName             string            `protobuf:"bytes,4,opt,name=FuncName,proto3" json:"FuncName,omitempty"`
	ReqPayload           []byte            `protobuf:"bytes,5,opt,name=ReqPayload,proto3" json:"ReqPayload,omitempty"`
	Timeout              uint32            `protobuf:"varint,6,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	Context              map[string]string `protobuf:"bytes,7,rep,name=Context,proto3" json:"Context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RPCRequestPacket) Reset()         { *m = RPCRequestPacket{} }
func (m *RPCRequestPacket) String() string { return proto.CompactTextString(m) }
func (*RPCRequestPacket) ProtoMessage()    {}
func (*RPCRequestPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_6817d3685cdeea1c, []int{2}
}
func (m *RPCRequestPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCRequestPacket.Unmarshal(m, b)
}
func (m *RPCRequestPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCRequestPacket.Marshal(b, m, deterministic)
}
func (dst *RPCRequestPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCRequestPacket.Merge(dst, src)
}
func (m *RPCRequestPacket) XXX_Size() int {
	return xxx_messageInfo_RPCRequestPacket.Size(m)
}
func (m *RPCRequestPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCRequestPacket.DiscardUnknown(m)
}

var xxx_messageInfo_RPCRequestPacket proto.InternalMessageInfo

func (m *RPCRequestPacket) GetIsOneWay() bool {
	if m != nil {
		return m.IsOneWay
	}
	return false
}

func (m *RPCRequestPacket) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *RPCRequestPacket) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RPCRequestPacket) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *RPCRequestPacket) GetReqPayload() []byte {
	if m != nil {
		return m.ReqPayload
	}
	return nil
}

func (m *RPCRequestPacket) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RPCRequestPacket) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

type RPCResponsePacket struct {
	RPCRetCode           int32             `protobuf:"varint,1,opt,name=RPCRetCode,proto3" json:"RPCRetCode,omitempty"`
	RequestId            uint32            `protobuf:"varint,2,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
	RspPayload           []byte            `protobuf:"bytes,3,opt,name=RspPayload,proto3" json:"RspPayload,omitempty"`
	Context              map[string]string `protobuf:"bytes,4,rep,name=Context,proto3" json:"Context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RPCResponsePacket) Reset()         { *m = RPCResponsePacket{} }
func (m *RPCResponsePacket) String() string { return proto.CompactTextString(m) }
func (*RPCResponsePacket) ProtoMessage()    {}
func (*RPCResponsePacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_6817d3685cdeea1c, []int{3}
}
func (m *RPCResponsePacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCResponsePacket.Unmarshal(m, b)
}
func (m *RPCResponsePacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCResponsePacket.Marshal(b, m, deterministic)
}
func (dst *RPCResponsePacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCResponsePacket.Merge(dst, src)
}
func (m *RPCResponsePacket) XXX_Size() int {
	return xxx_messageInfo_RPCResponsePacket.Size(m)
}
func (m *RPCResponsePacket) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCResponsePacket.DiscardUnknown(m)
}

var xxx_messageInfo_RPCResponsePacket proto.InternalMessageInfo

func (m *RPCResponsePacket) GetRPCRetCode() int32 {
	if m != nil {
		return m.RPCRetCode
	}
	return 0
}

func (m *RPCResponsePacket) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *RPCResponsePacket) GetRspPayload() []byte {
	if m != nil {
		return m.RspPayload
	}
	return nil
}

func (m *RPCResponsePacket) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

func init() {
	proto.RegisterType((*ProtocolRequest)(nil), "gpbrpc.ProtocolRequest")
	proto.RegisterType((*ProtocolResponse)(nil), "gpbrpc.ProtocolResponse")
	proto.RegisterType((*RPCRequestPacket)(nil), "gpbrpc.RPCRequestPacket")
	proto.RegisterMapType((map[string]string)(nil), "gpbrpc.RPCRequestPacket.ContextEntry")
	proto.RegisterType((*RPCResponsePacket)(nil), "gpbrpc.RPCResponsePacket")
	proto.RegisterMapType((map[string]string)(nil), "gpbrpc.RPCResponsePacket.ContextEntry")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_message_6817d3685cdeea1c) }

var fileDescriptor_message_6817d3685cdeea1c = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x41, 0x8b, 0xda, 0x40,
	0x14, 0xc7, 0x89, 0xd1, 0x68, 0x9e, 0x4a, 0xed, 0x50, 0x4a, 0x90, 0x52, 0x82, 0xd0, 0xe2, 0x29,
	0x87, 0xf6, 0x52, 0xbc, 0xb4, 0x90, 0x5a, 0xf0, 0xd2, 0x86, 0xb1, 0x50, 0x7a, 0x1c, 0x93, 0x87,
	0x2b, 0x9a, 0x4c, 0xcc, 0x4c, 0x64, 0xfd, 0x1a, 0xfb, 0x8d, 0xf6, 0x13, 0xed, 0x57, 0x58, 0x66,
	0x32, 0x31, 0x71, 0x2f, 0xcb, 0xc2, 0xde, 0xf2, 0xff, 0xbf, 0x99, 0x37, 0xff, 0xdf, 0x7b, 0x04,
	0xc6, 0x29, 0x0a, 0xc1, 0xb6, 0x18, 0xe4, 0x05, 0x97, 0x9c, 0x38, 0xdb, 0x7c, 0x53, 0xe4, 0xf1,
	0xec, 0x3f, 0xbc, 0x89, 0x94, 0x11, 0xf3, 0x03, 0xc5, 0x63, 0x89, 0x42, 0x92, 0x77, 0xd0, 0x0b,
	0xd3, 0x64, 0x95, 0x78, 0x96, 0x6f, 0xcd, 0xc7, 0xb4, 0x12, 0xe4, 0x3d, 0x38, 0x61, 0x9a, 0xac,
	0xf1, 0xe8, 0x75, 0xb4, 0x6d, 0x14, 0xf1, 0xa0, 0x1f, 0xa6, 0xc9, 0x4f, 0x26, 0x99, 0x67, 0xfb,
	0xd6, 0x7c, 0x44, 0x6b, 0x39, 0xbb, 0xb3, 0x60, 0xd2, 0xf4, 0x16, 0x39, 0xcf, 0x04, 0xbe, 0xbc,
	0x79, 0x54, 0x8a, 0x1b, 0x55, 0xb0, 0x75, 0xa1, 0x96, 0xe4, 0x03, 0xb8, 0xcb, 0xa2, 0xe0, 0x45,
	0xc8, 0x13, 0xf4, 0xba, 0xba, 0xd6, 0x18, 0xed, 0x50, 0xbd, 0xeb, 0x50, 0xf7, 0x1d, 0x98, 0xd0,
	0x28, 0x34, 0xac, 0x11, 0x8b, 0xf7, 0x28, 0xc9, 0x14, 0x06, 0x2b, 0xf1, 0x27, 0xc3, 0x7f, 0xec,
	0xac, 0x73, 0x0d, 0xe8, 0x45, 0xab, 0x87, 0xcc, 0xe1, 0x55, 0x62, 0xd2, 0x35, 0x06, 0xf1, 0x61,
	0xb8, 0xc6, 0xe2, 0xb4, 0x8b, 0xf1, 0x37, 0x4b, 0x51, 0x87, 0x74, 0x69, 0xdb, 0x52, 0xbd, 0x7f,
	0x95, 0x59, 0xac, 0xcb, 0x5d, 0x5d, 0xbe, 0x68, 0xf2, 0x11, 0x80, 0xe2, 0x31, 0x62, 0xe7, 0x03,
	0x67, 0x89, 0x49, 0xda, 0x72, 0x14, 0xc6, 0xdf, 0x5d, 0x8a, 0xbc, 0x94, 0x9e, 0x53, 0xe1, 0x1b,
	0x49, 0xbe, 0x43, 0x3f, 0xe4, 0x99, 0xc4, 0x5b, 0xe9, 0xf5, 0x7d, 0x7b, 0x3e, 0xfc, 0xf2, 0x29,
	0xa8, 0x16, 0x1a, 0x3c, 0x85, 0x0b, 0xcc, 0xb9, 0x65, 0x26, 0x8b, 0x33, 0xad, 0x6f, 0x4d, 0x17,
	0x30, 0x6a, 0x17, 0xc8, 0x04, 0xec, 0x3d, 0x56, 0xf4, 0x2e, 0x55, 0x9f, 0x6a, 0x53, 0x27, 0x76,
	0x28, 0x51, 0x43, 0xbb, 0xb4, 0x12, 0x8b, 0xce, 0x37, 0x6b, 0xf6, 0x60, 0xc1, 0x5b, 0xfd, 0x4c,
	0xb5, 0x53, 0x33, 0x44, 0x05, 0xa3, 0x4c, 0xa9, 0x57, 0xa2, 0x1a, 0xf5, 0x68, 0xcb, 0x79, 0x66,
	0x90, 0xea, 0xb6, 0xc8, 0xeb, 0x51, 0xd8, 0x66, 0x14, 0x17, 0x87, 0xfc, 0x68, 0x80, 0xbb, 0x1a,
	0xf8, 0xf3, 0x15, 0x70, 0x3b, 0xc9, 0xeb, 0x13, 0x6f, 0x1c, 0xfd, 0xd3, 0x7c, 0x7d, 0x0c, 0x00,
	0x00, 0xff, 0xff, 0xbc, 0x23, 0x99, 0xfc, 0x45, 0x03, 0x00, 0x00,
}
